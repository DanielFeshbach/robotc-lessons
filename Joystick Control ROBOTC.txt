#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Motor,  mtr_S1_C1_1,     frontRight,    tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     frontLeft,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     backRight,    tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     backLeft,     tmotorTetrix, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

int motorValue(int joystickValue) {
	int output = 0;
	if (abs(joystickValue) <= 10) {
		output = 0;
	}
	else if (abs(joystickValue) <= 64) {
		output = (abs(joystickValue) - 10) * 127/100
	}
	else if (joystickValue > 127){
		nxtDisplayCenteredTexLine(1, "Error with");
		nxtDisplayCenteredTexLine(2, "joystick input");
		nxtDisplayCenteredTexLine(3, "to motor output");
		nxtDisplayCenteredTexLine(4, "conversion:");
		nxtDisplayCenteredTexLine(5, "joystickValue");
		nxtDisplayCenteredTexLine(6, "is greater than");
		nxtDisplayCenteredTexLine(7, "127");
	}
	else if (joystickValue < -128){
		nxtDisplayCenteredTexLine(1, "Error with");
		nxtDisplayCenteredTexLine(2, "joystick input");
		nxtDisplayCenteredTexLine(3, "to motor output");
		nxtDisplayCenteredTexLine(4, "conversion:");
		nxtDisplayCenteredTexLine(5, "joystickValue");
		nxtDisplayCenteredTexLine(6, "is less than");
		nxtDisplayCenteredTexLine(7, "-128");
	}
	else if (joystickValue > 64){
			output = joystickValue*127/100;
	}
	else if (joystickValue < -64){
			output = joystickValue*128/100;
	}
	else {
		nxtDisplayCenteredTexLine(1, "Error with");
		nxtDisplayCenteredTexLine(2, "joystick input");
		nxtDisplayCenteredTexLine(3, "to motor output");
		nxtDisplayCenteredTexLine(4, "conversion:");
		nxtDisplayCenteredTexLine(5, "cause unknown");
	}
	return output
}

task main()
{
  while(1 == 1)
  {
    getJoystickSettings(joystick);
    motor[frontRight] = motorValue(joystick.joy1_y1);
    motor[frontLeft] = motorValue(joystick.joy1_y1);
    motor[backRight] = motorValue(joystick.joy1_y2);
    motor[backLeft] = motorValue(joystick.joy1_y2);
  }

}
